name: 🚀 Deploy Spring Boot to EC2

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2

      # 2) JDK 세팅 (Java 17 예시)
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      # 3) Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test

      # (NEW) 4) .env.prod 파일 생성
      - name: Generate .env.prod file
        run: |
          echo "$ENV_PROD_CONTENT" > .env.prod
        env:
          ENV_PROD_CONTENT: ${{ secrets.ENV_PROD_CONTENT }}

      # 5) SSH 키 설치 및 known_hosts 등록
      - name: Install SSH key & known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_WAS1_PUBLIC_IP }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ secrets.EC2_WAS2_PUBLIC_IP }} >> ~/.ssh/known_hosts
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

      # 6) WAS1에 배포
      - name: Deploy to WAS1
        run: |
          # 6-1) JAR, deploy 스크립트, .env.prod 파일 전송
          scp -o StrictHostKeyChecking=no build/libs/*.jar scripts/deploy_script.sh .env.prod \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_WAS1_PUBLIC_IP }}:/home/${{ secrets.EC2_USER }}/app/
          
          # 6-2) 권한 부여 & 실행
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_WAS1_PUBLIC_IP }} << 'EOF'
            chmod +x ~/app/deploy_script.sh
            chmod 600 ~/app/.env.prod # 보안 상 .env.prod 파일 권한 설정
            bash ~/app/deploy_script.sh
          EOF
        env:
          EC2_USER: ${{ secrets.EC2_USER }}

      # 7) WAS2에 배포
      - name: Deploy to WAS2
        run: |
          scp -o StrictHostKeyChecking=no build/libs/*.jar scripts/deploy_script.sh .env.prod \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_WAS2_PUBLIC_IP }}:/home/${{ secrets.EC2_USER }}/app/
          
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_WAS2_PUBLIC_IP }} << 'EOF'
            chmod +x ~/app/deploy_script.sh
            chmod 600 ~/app/.env.prod
            bash ~/app/deploy_script.sh
          EOF
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
